volumes:
  prometheus_data:
  grafana_data:


services:
  product-app:
    hostname: product-app
    container_name: product-app
    build:
      context: ./services/product
      dockerfile: Dockerfile
    env_file: ./services/product/.env
    environment:
      GRPC_HOST: product-app
      PG_HOST: ${PRODUCT_PG_HOST}
      PG_PORT: 5432 # gotta be local
      PG_USER: ${PRODUCT_PG_USER}
      PG_PASSWORD: ${PRODUCT_PG_PASSWORD}
      PG_DBNAME: ${PRODUCT_PG_DBNAME}
      PG_SSLMODE: ${PRODUCT_PG_SSLMODE}
    volumes:
      - type: bind
        source: ./services/product/.env
        target: /app/.env
        read_only: true
    ports:
      - ${GRPC_PRODUCT_PORT}:${GRPC_PRODUCT_PORT}
      - "8000:8000" # TODO swap after config change in services
    depends_on:
      - product-db
      - product-db-migrate
    networks:
      - default
  inventory-app:
    hostname: inventory-app
    container_name: inventory-app
    build:
      context: ./services/inventory
      dockerfile: Dockerfile
    env_file: ./services/inventory/.env
    environment:
      GRPC_HOST: inventory-app
      PG_HOST: ${INVENTORY_PG_HOST}
      PG_PORT: 5432 # gotta be local
      PG_USER: ${INVENTORY_PG_USER}
      PG_PASSWORD: ${INVENTORY_PG_PASSWORD}
      PG_DBNAME: ${INVENTORY_PG_DBNAME}
      PG_SSLMODE: ${INVENTORY_PG_SSLMODE}
    volumes:
      - type: bind
        source: ./services/inventory/.env
        target: /app/.env
        read_only: true
    ports:
      - ${GRPC_INVENTORY_PORT}:${GRPC_INVENTORY_PORT}
      - "8001:8001" # TODO swap after config change in services
    depends_on:
      - inventory-db
      - inventory-db-migrate
    networks:
      - default
  order-app:
    hostname: order-app
    container_name: order-app
    build:
      context: ./services/order
      dockerfile: Dockerfile
    env_file: ./services/order/.env
    environment:
      GRPC_HOST: order-app
      PG_HOST: ${ORDER_PG_HOST}
      PG_PORT: 5432 # gotta be local
      PG_USER: ${ORDER_PG_USER}
      PG_PASSWORD: ${ORDER_PG_PASSWORD}
      PG_DBNAME: ${ORDER_PG_DBNAME}
      PG_SSLMODE: ${ORDER_PG_SSLMODE}
    volumes:
      - type: bind
        source: ./services/order/.env
        target: /app/.env
        read_only: true
    ports:
      - ${GRPC_ORDER_PORT}:${GRPC_ORDER_PORT}
      - "8002:8002" # TODO swap after config change in services
    depends_on:
      - order-db
      - order-db-migrate
    networks:
      - default
  payment-app:
    hostname: payment-app
    container_name: payment-app
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    env_file: ./services/payment/.env
    environment:
      GRPC_HOST: payment-app
      PG_HOST: ${PAYMENT_PG_HOST}
      PG_PORT: 5432 # gotta be local
      PG_USER: ${PAYMENT_PG_USER}
      PG_PASSWORD: ${PAYMENT_PG_PASSWORD}
      PG_DBNAME: ${PAYMENT_PG_DBNAME}
      PG_SSLMODE: ${PAYMENT_PG_SSLMODE}
    volumes:
      - type: bind
        source: ./services/payment/.env
        target: /app/.env
        read_only: true
    ports:
      - ${GRPC_PAYMENT_PORT}:${GRPC_PAYMENT_PORT}
      - "8003:8003" # TODO swap after config change in services
    depends_on:
      - payment-db
      - payment-db-migrate
    networks:
      - default
  product-db:
    hostname: product-db
    container_name: product-db
    image: postgres
    ports:
      - ${PRODUCT_PG_PORT}:5432
    environment:
      POSTGRES_USER: ${PRODUCT_PG_USER}
      POSTGRES_PASSWORD: ${PRODUCT_PG_PASSWORD}
      POSTGRES_DB: ${PRODUCT_PG_DBNAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PRODUCT_PG_USER} -d ${PRODUCT_PG_DBNAME}" ]
      interval: 5s
      timeout: 5s
    networks:
      - default
  inventory-db:
    hostname: inventory-db
    container_name: inventory-db
    image: postgres
    ports:
      - ${INVENTORY_PG_PORT}:5432
    environment:
      POSTGRES_USER: ${INVENTORY_PG_USER}
      POSTGRES_PASSWORD: ${INVENTORY_PG_PASSWORD}
      POSTGRES_DB: ${INVENTORY_PG_DBNAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${INVENTORY_PG_USER} -d ${INVENTORY_PG_DBNAME}" ]
      interval: 5s
      timeout: 5s
    networks:
      - default
  order-db:
    hostname: order-db
    container_name: order-db
    image: postgres
    ports:
      - ${ORDER_PG_PORT}:5432
    environment:
      POSTGRES_USER: ${ORDER_PG_USER}
      POSTGRES_PASSWORD: ${ORDER_PG_PASSWORD}
      POSTGRES_DB: ${ORDER_PG_DBNAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${ORDER_PG_USER} -d ${ORDER_PG_DBNAME}" ]
      interval: 5s
      timeout: 5s
    networks:
      - default
  payment-db:
    hostname: payment-db
    container_name: payment-db
    image: postgres
    ports:
      - ${PAYMENT_PG_PORT}:5432
    environment:
      POSTGRES_USER: ${PAYMENT_PG_USER}
      POSTGRES_PASSWORD: ${PAYMENT_PG_PASSWORD}
      POSTGRES_DB: ${PAYMENT_PG_DBNAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PAYMENT_PG_USER} -d ${PAYMENT_PG_DBNAME}" ]
      interval: 5s
      timeout: 5s
    networks:
      - default
  product-db-migrate:
    container_name: product-db-migrate
    image: migrate/migrate
    command: -source file://migrations -database ${PRODUCT_MIGRATION_URL} up
    volumes:
      - ./services/product/migrations:/migrations
    depends_on:
      product-db:
        condition: service_healthy
    networks:
      - default
  inventory-db-migrate:
    container_name: inventory-db-migrate
    image: migrate/migrate
    command: -source file://migrations -database ${INVENTORY_MIGRATION_URL} up
    volumes:
      - ./services/inventory/migrations:/migrations
    depends_on:
      inventory-db:
        condition: service_healthy
    networks:
      - default
  order-db-migrate:
    container_name: order-db-migrate
    image: migrate/migrate
    command: -source file://migrations -database ${ORDER_MIGRATION_URL} up
    volumes:
      - ./services/order/migrations:/migrations
    depends_on:
      order-db:
        condition: service_healthy
    networks:
      - default
  payment-db-migrate:
    container_name: payment-db-migrate
    image: migrate/migrate
    command: -source file://migrations -database ${PAYMENT_MIGRATION_URL} up
    volumes:
      - ./services/payment/migrations:/migrations
    depends_on:
      payment-db:
        condition: service_healthy
    networks:
      - default

  prometheus:
    hostname: prometheus
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus_data/alerts.yaml:/etc/prometheus/alerts.yml
      - ./prometheus_data/prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:
      - default
  grafana:
    hostname: grafana_data
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - default
  jaeger:
    hostname: jaeger
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - default

  zoo1:
    image: confluentinc/cp-zookeeper:7.8.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - default

  kafka-broker-1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka-broker-1
    container_name: kafka-broker-1
    ports:
      - "19092:19092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-1:9092,EXTERNAL://localhost:19092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO,auto.create.topics.enable=false"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - default

  kafka-broker-2:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka-broker-2
    container_name: kafka-broker-2
    ports:
      - "19093:19093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-2:9093,EXTERNAL://localhost:19093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO,auto.create.topics.enable=false"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - default

  kafka-broker-3:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka-broker-3
    container_name: kafka-broker-3
    ports:
      - "19094:19094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-3:9094,EXTERNAL://localhost:19094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO,auto.create.topics.enable=false"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - default

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    ports:
      - "8089:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3


networks:
  default:
    driver: bridge