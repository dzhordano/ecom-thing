// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/inventory/v1/inventory.proto

package inventory_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_GetItem_FullMethodName           = "/api.inventory.v1.InventoryService/GetItem"
	InventoryService_AddQuantity_FullMethodName       = "/api.inventory.v1.InventoryService/AddQuantity"
	InventoryService_SubQuantity_FullMethodName       = "/api.inventory.v1.InventoryService/SubQuantity"
	InventoryService_LockQuantity_FullMethodName      = "/api.inventory.v1.InventoryService/LockQuantity"
	InventoryService_UnlockQuantity_FullMethodName    = "/api.inventory.v1.InventoryService/UnlockQuantity"
	InventoryService_SubLockedQuantity_FullMethodName = "/api.inventory.v1.InventoryService/SubLockedQuantity"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InventoryService provides basic operations with product inventory.
type InventoryServiceClient interface {
	// GetItem returns Item object with requested id.
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	// AddQuantity adds quantity to the product. If the product is not present, it will be created with the given quantity.
	AddQuantity(ctx context.Context, in *AddQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SubQuantity subtracts quantity from the product.
	SubQuantity(ctx context.Context, in *SubQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reserve certain amount of product quantity.
	LockQuantity(ctx context.Context, in *LockQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Release certain amount of product quantity that is reserved.
	UnlockQuantity(ctx context.Context, in *UnlockQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Subtract certain amount of product quantity that is reserved.
	SubLockedQuantity(ctx context.Context, in *SubQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddQuantity(ctx context.Context, in *AddQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_AddQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) SubQuantity(ctx context.Context, in *SubQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_SubQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) LockQuantity(ctx context.Context, in *LockQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_LockQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UnlockQuantity(ctx context.Context, in *UnlockQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_UnlockQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) SubLockedQuantity(ctx context.Context, in *SubQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_SubLockedQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
//
// InventoryService provides basic operations with product inventory.
type InventoryServiceServer interface {
	// GetItem returns Item object with requested id.
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	// AddQuantity adds quantity to the product. If the product is not present, it will be created with the given quantity.
	AddQuantity(context.Context, *AddQuantityRequest) (*emptypb.Empty, error)
	// SubQuantity subtracts quantity from the product.
	SubQuantity(context.Context, *SubQuantityRequest) (*emptypb.Empty, error)
	// Reserve certain amount of product quantity.
	LockQuantity(context.Context, *LockQuantityRequest) (*emptypb.Empty, error)
	// Release certain amount of product quantity that is reserved.
	UnlockQuantity(context.Context, *UnlockQuantityRequest) (*emptypb.Empty, error)
	// Subtract certain amount of product quantity that is reserved.
	SubLockedQuantity(context.Context, *SubQuantityRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedInventoryServiceServer) AddQuantity(context.Context, *AddQuantityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) SubQuantity(context.Context, *SubQuantityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) LockQuantity(context.Context, *LockQuantityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) UnlockQuantity(context.Context, *UnlockQuantityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) SubLockedQuantity(context.Context, *SubQuantityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubLockedQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddQuantity(ctx, req.(*AddQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_SubQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).SubQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_SubQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).SubQuantity(ctx, req.(*SubQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_LockQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).LockQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_LockQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).LockQuantity(ctx, req.(*LockQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UnlockQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UnlockQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UnlockQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UnlockQuantity(ctx, req.(*UnlockQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_SubLockedQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).SubLockedQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_SubLockedQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).SubLockedQuantity(ctx, req.(*SubQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _InventoryService_GetItem_Handler,
		},
		{
			MethodName: "AddQuantity",
			Handler:    _InventoryService_AddQuantity_Handler,
		},
		{
			MethodName: "SubQuantity",
			Handler:    _InventoryService_SubQuantity_Handler,
		},
		{
			MethodName: "LockQuantity",
			Handler:    _InventoryService_LockQuantity_Handler,
		},
		{
			MethodName: "UnlockQuantity",
			Handler:    _InventoryService_UnlockQuantity_Handler,
		},
		{
			MethodName: "SubLockedQuantity",
			Handler:    _InventoryService_SubLockedQuantity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/inventory/v1/inventory.proto",
}
