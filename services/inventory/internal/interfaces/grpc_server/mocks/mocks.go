// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/interfaces/item.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/interfaces/item.go -destination=internal/interfaces/grpc_server/mocks/mocks.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	domain "github.com/dzhordano/ecom-thing/services/inventory/internal/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockItemService is a mock of ItemService interface.
type MockItemService struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceMockRecorder
	isgomock struct{}
}

// MockItemServiceMockRecorder is the mock recorder for MockItemService.
type MockItemServiceMockRecorder struct {
	mock *MockItemService
}

// NewMockItemService creates a new mock instance.
func NewMockItemService(ctrl *gomock.Controller) *MockItemService {
	mock := &MockItemService{ctrl: ctrl}
	mock.recorder = &MockItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemService) EXPECT() *MockItemServiceMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockItemService) GetItem(ctx context.Context, id uuid.UUID) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, id)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemServiceMockRecorder) GetItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemService)(nil).GetItem), ctx, id)
}

// IsReservable mocks base method.
func (m *MockItemService) IsReservable(ctx context.Context, items map[string]uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReservable", ctx, items)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReservable indicates an expected call of IsReservable.
func (mr *MockItemServiceMockRecorder) IsReservable(ctx, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReservable", reflect.TypeOf((*MockItemService)(nil).IsReservable), ctx, items)
}

// SetItemWithOp mocks base method.
func (m *MockItemService) SetItemWithOp(ctx context.Context, id uuid.UUID, quantity uint64, op string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItemWithOp", ctx, id, quantity, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItemWithOp indicates an expected call of SetItemWithOp.
func (mr *MockItemServiceMockRecorder) SetItemWithOp(ctx, id, quantity, op any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItemWithOp", reflect.TypeOf((*MockItemService)(nil).SetItemWithOp), ctx, id, quantity, op)
}

// SetItemsWithOp mocks base method.
func (m *MockItemService) SetItemsWithOp(ctx context.Context, items map[string]uint64, op string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItemsWithOp", ctx, items, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItemsWithOp indicates an expected call of SetItemsWithOp.
func (mr *MockItemServiceMockRecorder) SetItemsWithOp(ctx, items, op any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItemsWithOp", reflect.TypeOf((*MockItemService)(nil).SetItemsWithOp), ctx, items, op)
}
