// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/interfaces/payment.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	dto "github.com/dzhordano/ecom-thing/services/payment/internal/application/dto"
	domain "github.com/dzhordano/ecom-thing/services/payment/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// CancelPayment mocks base method.
func (m *MockPaymentService) CancelPayment(ctx context.Context, paymentId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPayment", ctx, paymentId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelPayment indicates an expected call of CancelPayment.
func (mr *MockPaymentServiceMockRecorder) CancelPayment(ctx, paymentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPayment", reflect.TypeOf((*MockPaymentService)(nil).CancelPayment), ctx, paymentId, userId)
}

// ConfirmPayment mocks base method.
func (m *MockPaymentService) ConfirmPayment(ctx context.Context, paymentId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPayment", ctx, paymentId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmPayment indicates an expected call of ConfirmPayment.
func (mr *MockPaymentServiceMockRecorder) ConfirmPayment(ctx, paymentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPayment", reflect.TypeOf((*MockPaymentService)(nil).ConfirmPayment), ctx, paymentId, userId)
}

// CreatePayment mocks base method.
func (m *MockPaymentService) CreatePayment(ctx context.Context, req dto.CreatePaymentRequest) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, req)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentServiceMockRecorder) CreatePayment(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentService)(nil).CreatePayment), ctx, req)
}

// GetPaymentStatus mocks base method.
func (m *MockPaymentService) GetPaymentStatus(ctx context.Context, paymentId, userId uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatus", ctx, paymentId, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatus indicates an expected call of GetPaymentStatus.
func (mr *MockPaymentServiceMockRecorder) GetPaymentStatus(ctx, paymentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatus", reflect.TypeOf((*MockPaymentService)(nil).GetPaymentStatus), ctx, paymentId, userId)
}

// RetryPayment mocks base method.
func (m *MockPaymentService) RetryPayment(ctx context.Context, paymentId, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryPayment", ctx, paymentId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryPayment indicates an expected call of RetryPayment.
func (mr *MockPaymentServiceMockRecorder) RetryPayment(ctx, paymentId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryPayment", reflect.TypeOf((*MockPaymentService)(nil).RetryPayment), ctx, paymentId, userId)
}
